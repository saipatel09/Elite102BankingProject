import sqlite3 

#new class
class BankDB:
  def __init__(self, db_name="bank.db"):
    self.conn = sqlite3.connect(db_name)
    self.cursor = self.conn.cursor()
    self.setup_database()

  def setup_database(self):
    #Create the table
    self.cursor.execute("""
    CREATE TABLE IF NOT EXISTS accounts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      account_number TEXT NOT NULL,
      balance REAL NOT NULL
    )
  """)
    self.conn.commit()

  def create_account(self, account_number, initial_balance=0):
    #insert a new account with the given information
    try:
      self.cursor.execute("""
     INSERT INTO accounts (account_number, balance)
    VALUES (?, ?)
  """, (account_number, initial_balance))
      self.conn.commit()
      return True
    except sqlite3.Error as e:
      print(f"An error occurred: {e}")
      return False

  def close_account(self, account_number):
    #delete an account
    try:
      self.cursor.execute("""
      DELETE FROM accounts WHERE account_number = ?
  """, (account_number,))
      self.conn.commit()
      return True
    except sqlite3.Error as e:
      print(f"An eccor occured: {e}")
      return False

  def update_balance(self, account_number, amount):
    #update the balance of an account by a given amount
    
    try:
      self.cursor.execute("""
      UPDATE accounts SET balance = balance + ? WHERE account_number = ?
  """, (amount, account_number))
      self.conn.commit()
    except sqlite3.Error as e:
      print(f"An eccor occured: {e}")
      return None
  

  def get_balance(self, account_number):
    #retrieve current balance of account
    try:
      self.cursor.execute("""
      SELECT balance FROM accounts WHERE account_number = ?
  """, (account_number,))
      result = self.cursor.fetchone()
      return result[0] if result else None
    except sqlite3.Error as e:
      print(f"An eccor occured: {e}")  

  def get_account_details(self):
    #fetch all account details
    try:
      self.cursor.execute("""
      SELECT * FROM accounts
  """)
      return self.cursor.fetchall()
    except sqlite3.Error as e:
      print(f"An eccor occured: {e}")

  def __del__(self):
    self.conn.close()

#create a new instance of the BankDB class
class Bank:
  def __init__(self):
    self.db = BankDB()

  def create_account(self, account_number, initial_balance=0):
    #interface to create a new bank account
    self.db.create_account(account_number, initial_balance)
    print(f"Account created for {account_number} with balance {initial_balance}")

  def close_account(self, account_number):
    #interface to close an existing bank account
    self.db.close_account(account_number)
    print(f"Account closed for {name}")

  def deposit_to_account(self, account_number, amount):
    #interface to deposit money into an existing bank account
    if amount > 0:
      self.db.update_balance(account_number, amount)
      print(f"Deposited {amount} to {account_number}'s account")
    else:
      print("Deposit amount must be positive")

  def withdraw_from_account(self, account_number, amount):
    #interface to withdraw money from an existing bank account
    if amount > 0:
      balance = self.db.get_balance(account_number)
      if balance is not None and balance >= amount:
        self.db.update_balance(account_number, -amount)
        print(f"Withdrew {amount} from {account_number}'s account")

      else:
        print("Insufficient balance")
    else: 
      print("Withdrawal amount must be negative")

  def check_account_balance(self, account_number):
    #interface to check the balance of an existing bank account
    balance = self.db.get_balance(account_number)
    if balance is not None:
      print(f"The current balance for {account_number} is {balance}")
    else:
      print("Account does not exist")

  def list_accounts(self):
    #interface to list all existing bank accounts
    accounts = self.db.get_account_details()
    for account in accounts:
      print(f"Account of {account[1]} with balance {account[2]}")


#sample test
bank = Bank()
bank.create_account('John', 1000)
bank.deposit_to_account('John', 500)
bank.withdraw_from_account('John', 200)
bank.check_account_balance('John')
bank.list_accounts()
#bank.close_accounts('Alice')
bank.list_accounts()
